apply plugin: 'com.android.application'

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

//println("hello , world")
def test;
test = 123
test = "happy"
//println(test)
//println(rootProject.ext.aaa)
//println(rootProject.ext.bbb)
//apply plugin: 'plugin-transform'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.example.opencvexample"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "2.0"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        multiDexKeepFile file('multidex-config.txt')
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a'//, 'x86'//,'arm64-v8a','x86', 'x86_64'
        }
//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//                arguments "-DANDROID_STL=c++_shared"
//                abiFilters 'armeabi-v7a'//, 'x86'//,'arm64-v8a', 'x86_64'
//            }
//        }
    }

//    sourceSets {
//        main() {
//            jniLibs.srcDirs = ['src/main/jniLibs']
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    externalNativeBuild {
//        cmake {
//            path "src/main/cpp/CMakeLists.txt"
//            version "3.10.2"
//        }
//    }

    dataBinding {
        enabled = true
    }
    final def log = project.logger
    final def variants = project.android.applicationVariants
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    variants.all { variant ->
        if (!variant.buildType.isDebuggable()) {
            log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
            return;
        }

        JavaCompile javaCompile = variant.javaCompile
        javaCompile.doLast {
            String[] args = ["-showWeaveInfo",
                             "-1.8",
                             "-inpath", javaCompile.destinationDir.toString(),
                             "-aspectpath", javaCompile.classpath.asPath,
                             "-d", javaCompile.destinationDir.toString(),
                             "-classpath", javaCompile.classpath.asPath,
                             "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
            log.debug "ajc args: " + Arrays.toString(args)

            MessageHandler handler = new MessageHandler(true);
            new Main().run(args, handler);
            for (IMessage message : handler.getMessages(null, true)) {
                switch (message.getKind()) {
                    case IMessage.ABORT:
                    case IMessage.ERROR:
                    case IMessage.FAIL:
                        log.error message.message, message.thrown
                        break;
                    case IMessage.WARNING:
                        log.warn message.message, message.thrown
                        break;
                    case IMessage.INFO:
                        log.info message.message, message.thrown
                        break;
                    case IMessage.DEBUG:
                        log.debug message.message, message.thrown
                        break;
                }
            }
        }
    }

        lintOptions {
            // 设置为 true，则当 Lint 发现错误时停止 Gradle 构建
            abortOnError false
            // 设置为 true，则当有错误时会显示文件的全路径或绝对路径 (默认情况下为true)
            absolutePaths true
            // 仅检查指定的问题（根据 id 指定）
//            check 'NewApi', 'InlinedApi'
            // 设置为 true 则检查所有的问题，包括默认不检查问题
            checkAllWarnings true
            // 设置为 true 后，release 构建都会以 Fatal 的设置来运行 Lint。
            // 如果构建时发现了致命（Fatal）的问题，会中止构建（具体由 abortOnError 控制）
            checkReleaseBuilds false
            // 不检查指定的问题（根据问题 id 指定）
            disable 'TypographyFractions','TypographyQuotes'
            // 检查指定的问题（根据 id 指定）
            enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
            // 在报告中是否返回对应的 Lint 说明
            explainIssues true
            // 写入报告的路径，默认为构建目录下的 lint-results.html
            htmlOutput file("lint-report.html")
            // 设置为 true 则会生成一个 HTML 格式的报告
            htmlReport true
            // 设置为 true 则只报告错误
            ignoreWarnings true
            // 重新指定 Lint 规则配置文件
            lintConfig file("default-lint-report.xml")
            // 设置为 true 则错误报告中不包括源代码的行号
            noLines true
            // 设置为 true 时 Lint 将不报告分析的进度
            quiet true
            // 覆盖 Lint 规则的严重程度，例如：
//            severityOverrides ["MissingTranslation": LintOptions.SEVERITY_WARNING]
            // 设置为 true 则显示一个问题所在的所有地方，而不会截短列表
            showAll true
            // 配置写入输出结果的位置，格式可以是文件或 stdout
            textOutput 'stdout'
            // 设置为 true，则生成纯文本报告（默认为 false）
            textReport false
            // 设置为 true，则会把所有警告视为错误处理
            warningsAsErrors true
            // 写入检查报告的文件（不指定默认为 lint-results.xml）
            xmlOutput file("lint-report.xml")
            // 设置为 true 则会生成一个 XML 报告
            xmlReport true
            // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Fatal
            fatal 'NewApi', 'InlineApi'
            // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Error
            error 'Wakelock', 'TextViewEdits'
            // 将指定问题（根据 id 指定）的严重级别（severity）设置为 Warning
            warning 'ResourceAsColor'
            // 将指定问题（根据 id 指定）的严重级别（severity）设置为 ignore
            ignore 'TypographyQuotes'
        }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-alpha2'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.rmtheis:tess-two:7.0.0'
    implementation 'org.aspectj:aspectjrt:1.8.9'
    implementation 'com.android.support:multidex:1.0.3'
    implementation project(path: ':library')
    implementation 'com.google.android:flexbox:2.0.0'
    implementation 'org.ow2.asm:asm:7.2'
    implementation 'org.ow2.asm:asm-commons:7.2'
    implementation 'junit:junit:4.13'
    implementation 'com.qmuiteam:qmui:2.0.0-alpha10'
    def qmui_arch_version = '2.0.0-alpha10'
    implementation "com.qmuiteam:arch:$qmui_arch_version"
    annotationProcessor "com.qmuiteam:arch-compiler:$qmui_arch_version"
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    implementation "com.blankj:utilcode:1.25.9"
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.0-beta01'
//    implementation(name:'picturerecognition',ext:'aar')
    implementation 'io.github.xbzl123:picturerecognition:0.0.1'

}

//File file = new File("D:\\OpenCV-android-sdk\\OpenCVExample\\res\\example.txt")
//file.eachLine {
//    String line -> println("\t" + line)
//}

//pluginSrc{
//    message = 'hello longyanghe gradle plugin'
//}

//apply plugin: 'plugin-transform'
//
//apply plugin: 'mytest'
//apply plugin: 'mytransform-gradle'
//test111 {
//    str = '动态生成java类的字符串'
//}
